import asyncio
import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

API_TOKEN = '7776421169:AAHvwjNRCzadSmR2KMraUJNRxWpehK3K5mc'  

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–Ω–æ–ø–∫–∏
register_url = "https://u3.shortink.io/register?utm_campaign=819083&utm_source=affiliate&utm_medium=sr&a=Df4ek3JlsrzSid&ac=tgchanel&code=50START"

# –ö–Ω–æ–ø–∫–∏ –º–æ–≤
lang_kb = InlineKeyboardMarkup().add(
    InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_uk"),
    InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")
)

# –°—Ç—Ä–∞—Ç–µ–≥—ñ—è –∫–Ω–æ–ø–∫–∞
strategy_btn_uk = InlineKeyboardMarkup().add(
    InlineKeyboardButton("üìò –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é", callback_data="strategy_uk")
)
strategy_btn_en = InlineKeyboardMarkup().add(
    InlineKeyboardButton("üìò Get strategy", callback_data="strategy_en")
)

register_btn = InlineKeyboardMarkup().add(
    InlineKeyboardButton("üîó –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", url=register_url)
)
register_btn_en = InlineKeyboardMarkup().add(
    InlineKeyboardButton("üîó Register", url=register_url)
)

# –°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_lang = {}
registered_users = set()  # ‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("Choose your language / –û–±–µ—Ä–∏ –º–æ–≤—É:", reply_markup=lang_kb)

@dp.callback_query_handler(lambda c: c.data.startswith('lang_'))
async def set_language(callback_query: types.CallbackQuery):
    lang = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    user_lang[user_id] = lang
    registered_users.add(user_id)  # ‚úÖ –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–∏—Ö, —Ö—Ç–æ –≤–∏–±—Ä–∞–≤ –º–æ–≤—É
    await bot.answer_callback_query(callback_query.id)
    
    if lang == 'uk':
        await bot.send_message(user_id,
            "–ü—Ä–∏–≤—ñ—Ç! –¶–µ PocketSignal1D ü§ñ\n\n–Ø –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É —Ç–æ–±—ñ —Å–∏–≥–Ω–∞–ª–∏ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –Ω–∞ Pocket Option.\n\n–ü–æ—á–Ω–∏ —ñ–∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", reply_markup=register_btn)
        await bot.send_message(user_id,
            "üìò –•–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ—Å—Ç—É —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é?", reply_markup=strategy_btn_uk)
    else:
        await bot.send_message(user_id,
            "Hi! This is PocketSignal1D ü§ñ\n\nI will send you trading signals for Pocket Option.\n\nStart with registration:", reply_markup=register_btn_en)
        await bot.send_message(user_id,
            "üìò Want a simple strategy?", reply_markup=strategy_btn_en)

@dp.callback_query_handler(lambda c: c.data == 'strategy_uk')
async def strategy_info_uk(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
        "–°—Ç—Ä–∞—Ç–µ–≥—ñ—è \"3 —ñ–∑ 5\":\n\n1. –û–±–µ—Ä–∏ EUR/USD.\n2. –£–≤—ñ–º–∫–Ω–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä RSI.\n3. –Ø–∫—â–æ RSI < 30 ‚Äî —Å—Ç–∞–≤ –í–ì–û–†–£.\n4. –Ø–∫—â–æ RSI > 70 ‚Äî —Å—Ç–∞–≤ –í–ù–ò–ó.\n5. –ó—Ä–æ–±–∏ 5 —É–≥–æ–¥ –ø–æ $1.\n3+ —É–≥–æ–¥–∏ –≤ –ø–ª—é—Å ‚Äî —Ç–∏ –≤ –∑–∞—Ä–æ–±—ñ—Ç–∫—É üí∏")

@dp.callback_query_handler(lambda c: c.data == 'strategy_en')
async def strategy_info_en(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
        "\"3 of 5\" Strategy:\n\n1. Choose EUR/USD.\n2. Enable RSI indicator.\n3. If RSI < 30 ‚Äî trade UP.\n4. If RSI > 70 ‚Äî trade DOWN.\n5. Make 5 trades of $1.\nIf 3+ are in profit ‚Äî you win üí∏")

# –§–µ–π–∫–æ–≤—ñ —Å–∏–≥–Ω–∞–ª–∏ (—Ä–∞–Ω–¥–æ–º)
assets = ["EUR/USD", "GBP/USD", "BTC/USD", "ETH/USD"]
directions = ["–í–ì–û–†–£", "–í–ù–ò–ó"]
directions_en = ["UP", "DOWN"]

async def send_fake_signals():
    while True:
        await asyncio.sleep(600)  # –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω
        for chat_id in registered_users:
            try:
                lang = user_lang.get(chat_id, 'uk')
                if lang == 'uk':
                    signal = f"üí° –°–∏–≥–Ω–∞–ª:\n–ê–∫—Ç–∏–≤: {random.choice(assets)}\n–ù–∞–ø—Ä—è–º: {random.choice(directions)}\n–ß–∞—Å: {random.randint(1,3)} —Ö–≤–∏–ª–∏–Ω–∏\n–°—Ç–∞–≤–∫–∞: $1"
                else:
                    signal = f"üí° Signal:\nAsset: {random.choice(assets)}\nDirection: {random.choice(directions_en)}\nTime: {random.randint(1,3)} minutes\nAmount: $1"
                await bot.send_message(chat_id, signal)
            except:
                pass

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(_):
    asyncio.create_task(send_fake_signals())

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
